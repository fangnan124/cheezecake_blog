upstream puma {
   server web:3000;
}
server {
    listen 80;
    server_name www.cheezecake.net;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}
server {
   listen 443 ssl;
   # define your domain
   server_name www.cheezecake.net;
   # define the public application root
   root   /cheezecake_blog/public;
   index  index.html;
   # define where Nginx should write its logs
   # access_log /cheezecake_blog/log/nginx.access.log;
   # error_log /cheezecake_blog/log/nginx.error.log;

   ssl_certificate /etc/letsencrypt/live/www.cheezecake.net/fullchain.pem;
   ssl_certificate_key /etc/letsencrypt/live/www.cheezecake.net/privkey.pem;
   include /etc/letsencrypt/options-ssl-nginx.conf;
   ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

   # deny requests for files that should never be accessed
   location ~ /\. {
      deny all;
   }
   location ~* ^.+\.(rb|log)$ {
      deny all;
   }

   # serve static (compiled) assets directly if they exist (for rails production)
   location ~ ^/(assets|packs)/   {
      try_files $uri @rails;
      access_log off;
      gzip_static on;
      # to serve pre-gzipped version
      expires max;
      add_header Cache-Control public;

      add_header Last-Modified "";
      add_header ETag "";
      break;
   }

   # send non-static file requests to the app server
   location / {
      try_files $uri @rails;
   }
   location @rails {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_redirect off;
      proxy_pass http://puma;
   }
}